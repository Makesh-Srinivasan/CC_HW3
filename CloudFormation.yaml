AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to create 2 Lambda functions, 2 S3 buckets and API gateway

Resources:
  MakeshAdiPhotoStoringBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: makesh-adi-photo-storing-bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  PhotoStoringPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Delete
    Properties:
      Bucket: !Ref MakeshAdiPhotoStoringBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal: '*'
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${MakeshAdiPhotoStoringBucket}/*'

  MakeshAdiPhotosBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: makesh-adi-photos-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  FrontendStorePolicy:
    Type: 'AWS::S3::BucketPolicy'
    DeletionPolicy: Delete
    Properties:
      Bucket: !Ref MakeshAdiPhotosBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Principal: '*'
          Action: 's3:GetObject'
          Resource: !Sub 'arn:aws:s3:::${MakeshAdiPhotosBucket}/*'

  IndexLambdaExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaRekognitionAndOpenSearchPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rekognition:*
                  - es:ESHttp*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt MakeshAdiPhotoStoringBucket.Arn
                  - !Sub '${MakeshAdiPhotoStoringBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  IndexPhotosLF1:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    Properties:
      Code:
        S3Bucket: cf-lambdas-bucket-3
        S3Key: index-photos.zip      
      Handler: index-photos.lambda_handler 
      Role: !GetAtt IndexLambdaExecutionRole.Arn
      Runtime: python3.12 
      Timeout: 30

  IndexLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DeletionPolicy: Delete
    Properties:
      FunctionName: !Ref IndexPhotosLF1
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt MakeshAdiPhotoStoringBucket.Arn

  ApiGatewayS3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${MakeshAdiPhotoStoringBucket}/*'

  PhotoAPI:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    Properties:
      EndpointConfiguration: 'REGIONAL'
      BinaryMediaTypes: ["*/*"]
      Name: "PhotoAPI"
      Description: "API for photo management"

  PhotoAPIUploadResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: PhotoAPI
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref PhotoAPI
      ParentId: !GetAtt
        - PhotoAPI
        - RootResourceId
      PathPart: "upload"

  PhotoAPISearchResource:
    Type: AWS::ApiGateway::Resource
    DependsOn: PhotoAPI
    DeletionPolicy: Delete
    Properties:
      RestApiId: !Ref PhotoAPI
      ParentId: !GetAtt
        - PhotoAPI
        - RootResourceId
      PathPart: "search"

  PhotoAPIPutRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: PhotoAPIUploadResource
    DeletionPolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiGatewayS3Role.Arn
        IntegrationHttpMethod: PUT
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.bucket: method.request.header.bucket
          integration.request.path.key: method.request.header.key
          integration.request.header.x-amz-meta-customLabels: method.request.header.x-amz-meta-customLabels
        Uri: arn:aws:apigateway:${AWS::Region}:s3:path/{bucket}/{key}
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 403
        - StatusCode: 500
      OperationName: "/upload"
      RequestParameters:
        method.request.header.bucket: True
        method.request.header.key: True
        method.request.header.x-amz-meta-customLabels: True
      ResourceId: !Ref PhotoAPIUploadResource
      RestApiId: !Ref PhotoAPI

  PhotoAPIGetRequest:
    Type: AWS::ApiGateway::Method
    DependsOn: PhotoAPISearchResource
    DeletionPolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          "application/json": "{\"q\": \"$input.params('q')\"}"
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt searchPhotosLF2.Arn
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 403
        - StatusCode: 500
      OperationName: "/search"
      RequestParameters:
        method.request.querystring.q: True
      ResourceId: !Ref PhotoAPISearchResource
      RestApiId: !Ref PhotoAPI

  PhotoAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DeletionPolicy: Delete
    DependsOn:
      - PhotoAPIPutRequest
      - PhotoAPIGetRequest
    Properties:
      RestApiId: !Ref PhotoAPI
      StageName: PROD

  searchPhotosLF2:
  Type: AWS::Lambda::Function
  Properties:
    Code:
      S3Bucket: cf-lambdas-bucket-3 
      S3Key: search-photos.zip
    Handler: search-photos.lambda_handler
    Role: !GetAtt SearchPhotosLambdaExecutionRole.Arn
    Runtime: python3.12
    Timeout: 30

SearchPhotosLambdaExecutionRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
    Policies:
      - PolicyName: LambdaLexFullAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - lex:PostContent
                - lex:PostText
                - lex:PutSession
                - lex:GetSession
                - lex:DeleteSession
                - lex:RecognizeText
                - lex:RecognizeUtterance
                - lex:StartConversation
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
